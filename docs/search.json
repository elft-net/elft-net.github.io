[
  {
    "objectID": "journal.html",
    "href": "journal.html",
    "title": "The Devops Society",
    "section": "",
    "text": "Re-installing Nix on macOS\n\n\n\n\n\n\nnix nix-darwin devbox\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\nPeter Mostert\n\n\n\n\n\n\n\n\n\n\n\n\nSome Thoughts about AI.\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\nPeter Mostert\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nr\n\n\n\n\n\n\n\n\n\nSep 20, 2024\n\n\nPeter Mostert\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 17, 2024\n\n\nPeter Mostert\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About\nIn an effort to get aquainted with Quarto and its Features this site has been published to Document the journey. This caused the origin of this site and if things go according to plan then the Journal will get decorated with Devops rekated articles.\nAt some point in time regular life will probably get in the way blocking our endeavours to explore new technologies and workflows. But then, according to Albert, time slows down when moving fast so let’s do just that and quickly push things forward."
  },
  {
    "objectID": "posts/ai/ai-intro.html",
    "href": "posts/ai/ai-intro.html",
    "title": "Some Thoughts about AI.",
    "section": "",
    "text": "Within the realm of Artificial Intelligence (AI), the journey from basic learning patterns to cutting-edge generative models has been nothing short of transformative. Understanding the evolution of AI while keeping the context of generative AI in mind, sheds light on the capabilities and possibilities of this current technology hype.\nBasic Learning Patterns and Inference\nAt the core of AI’s capabilities lie the basic learning patterns and inference stages. Initially, AI algorithms were designed to analyze data, recognize patterns, and make predictions based on these patterns. This process involved processing vast amounts of data to identify correlations and extract valuable insights.\nWith the foundational knowledge gained from learning patterns, AI models enter the inference stage. Here, they leverage their understanding of the patterns to make informed decisions or evaluations based on new data. This capability enable AI systems to apply their learned knowledge in real-world scenarios.\nGenerative AI\nIn recent years, generative AI has emerged as the new frontier in artificial intelligence. Unlike traditional AI models that focus on analyzing existing data, generative AI is capable of creating new data and content. These models have the ability to generate text, images, music, and even videos that mimic human creativity and imagination.\nOne of the key aspects of generative AI is the incorporation of a common knowledge base (LLM) built during the learning stage. By providing context to the model in the inferencing stage, AI systems develop some form of awareness that enables them to generate outcomes. This contextual understanding allows generative AI models to produce content that aligns with human expectations.\nStatistical Approach and Hallucinated Outcomes\nGenerative AI operates on a statistical approach that enables it to generate diverse and sometimes unexpected outcomes. The statitical hustling of learned content introduces the sugestion of being creative but also introduces the concept of hallucinated outcomes, where AI models produce results that may not have a direct correlation with the input data. These hallucinated outcomes can manifest in various forms, such as creative variations of existing content or entirely novel creations that push the boundaries of human imagination.\nWhile the potential of generative AI is undeniably captivating, challenges lie ahead that demand careful consideration. One such challenge arises from the fact that many Large Language Models (LLMs) are trained on a broad, generic knowledge base. As a result, these models may lack detailed information about recent developments or company-specific nuances. This limitation raises a critical question: Can businesses rely on the outcomes of generative AI for strategic decision making? Understanding the potential risks associated with hallucinated outcomes due to the lack of specific knowledge input is essential to leveraging AI effectively.\nImagine a scenario where a company turns to generative AI to generate market analysis reports or make predictions about future trends. In the absence of real-time, updated data tailored to the company’s needs, the chances of encountering hallucinated outcomes or inaccurate conclusions become more pronounced. The AI model, disconnected from the latest industry insights or internal company dynamics, may inadvertently lead decision-makers astray by producing results that are not aligned with the current reality.\nSo, how can organizations mitigate these risks and enhance the accuracy of generative AI models in practical applications? This question beckons a crucial discussion on the need for fine-tuning AI systems, integrating domain-specific knowledge, and implementing robust validation processes to ensure that the outcomes derived from generative AI align with reality. In the next phase of AI advancement, addressing these challenges and fortifying generative models with targeted information could pave the way for more reliable, context-aware AI solutions that empower organizations to make informed decisions with confidence."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Peter Mostert",
    "section": "",
    "text": "Digital Engineer @ TechNative | CI/CD, ICT-Strategy, MicroServices"
  },
  {
    "objectID": "posts/nix/nix-reinstall.html",
    "href": "posts/nix/nix-reinstall.html",
    "title": "Re-installing Nix on macOS",
    "section": "",
    "text": "Needed to re-install Nix after having deployed an update that didn’t work out. Just could not spend the time to figure out why access to the nix deamon was denied in the new version. Re-installing provided me with an opportunity to get my Nix-installation in compliance with the rest of the organization.\nMy journey started here: https://zero-to-nix.com/concepts/nix-installer. The script failed while the /nix file system could not be replaced and there were some users and a group that stood in the way. Got a clean setup by doing:\ndiskutil apfs deleteVolume \"Nix Store\"\nsudo dscl . -delete /Groups/nixbld\nfor i in $(seq 12 32); do sudo dscl . -delete /Users/_nixbld$i; done\nAfter that the installation worked (I had to try twice for some reason).\n[mos@chap ~/Repo/play/devops-directive-kubernetes-course]$ curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install\ninfo: downloading installer (https://install.determinate.systems/nix/tag/v0.26.2/nix-installer-x86_64-darwin)\n INFO nix-installer v0.26.2\n`nix-installer` needs to run as `root`, attempting to escalate now via `sudo`...\nPassword:\n INFO nix-installer v0.26.2\nNix install plan (v0.26.2)\nPlanner: macos (with default settings)\n\nPlanned actions:\n* Create an encrypted APFS volume `Nix Store` for Nix on `disk1` and add it to `/etc/fstab` mounting on `/nix`\n* Extract the bundled Nix (originally from /nix/store/zw0glikil8ncwb6r7bgdrilk50cval8i-nix-binary-tarball-2.24.7/nix-2.24.7-x86_64-darwin.tar.xz)\n* Create a directory tree in `/nix`\n* Move the downloaded Nix into `/nix`\n* Create build users (UID 351-382) and group (GID 350)\n* Configure Time Machine exclusions\n* Setup the default Nix profile\n* Place the Nix configuration in `/etc/nix/nix.conf`\n* Configure the shell profiles\n* Configuring zsh to support using Nix in non-interactive shells\n* Create a `launchctl` plist to put Nix into your PATH\n* Configure upstream Nix daemon service\n* Remove directory `/nix/temp-install-dir`\n\n\nProceed? ([Y]es/[n]o/[e]xplain): Y\n INFO Step: Create an encrypted APFS volume `Nix Store` for Nix on `disk1` and add it to `/etc/fstab` mounting on `/nix`\n INFO Step: Provision Nix\n INFO Step: Create build users (UID 351-382) and group (GID 350)\n INFO Step: Configure Time Machine exclusions\n INFO Step: Configure Nix\n INFO Step: Configuring zsh to support using Nix in non-interactive shells\n INFO Step: Create a `launchctl` plist to put Nix into your PATH\n INFO Step: Configure upstream Nix daemon service\n INFO Step: Remove directory `/nix/temp-install-dir`\nNix was installed successfully!\nTo get started using Nix, open a new shell or run `. /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh`\n\n[mos@chap ~/Repo/play/devops-directive-kubernetes-course]$\nnix-installer-x86_64-darwin\n[mos@chap ~/.config]$ mkdir -p ~/.config/nix-darwin                                             (:|✔)  4:00PM\n[mos@chap ~/.config]$ cd nix-darwin/                                                            (:|✔)  4:01PM\n[mos@chap ~/.config/nix-darwin]$ nix flake init -t nix-darwin                                   (:|✔)  4:01PM\nwrote: /Users/mos/.config/nix-darwin/flake.nix\n[mos@chap ~/.config/nix-darwin]$ sed -i '' \"s/simple/$(scutil --get LocalHostName)/\" flake.nix  (:|✔)  4:02PM\n[mos@chap ~/.config/nix-darwin]$ nix run nix-darwin -- switch --flake ~/.config/nix-darwin#chap\nmoving forward\nnix-darwin and nix can be setup to control a ton of settings. For now thing like home-manager (controling user specific configuration settings) and brew repositories (enabling to install the brew applications not available in the nix-store) were not merged into the config just to not get overwhealmed.\nHowever devbox now runs upon the nix installation described above. DevBox is a tool that can configures your shell on a project bases. If the project directory contains a devbox.json file then devbox handles this in a flake like approach. devbox shell installs the packages mentioned in devbox.json into your current shell. This is my main use-case atm.\nsample devbox.json\n{\n  \"$schema\": \"https://raw.githubusercontent.com/jetify-com/devbox/0.10.7/.schema/devbox.schema.json\",\n  \"packages\": [\n    \"civo@latest\",\n    \"envsubst@latest\",\n    \"gh@latest\",\n    \"go@latest\",\n    \"go-task@latest\",\n    \"path:gcloud#google-cloud-sdk\",\n    \"gum@latest\",\n    \"jq@latest\",\n    \"k9s@latest\",\n    \"kind@latest\",\n    \"kluctl@latest\",\n    \"ko@latest\",\n    \"kubectl@latest\",\n    \"kubectx@latest\",\n    \"kubernetes-helm@latest\",\n    \"kustomize@latest\",\n    \"oras@latest\",\n    \"nodejs_20@latest\",\n    \"poetry@latest\",\n    \"python312@latest\",\n    \"tilt@latest\",\n    \"yq-go@latest\",\n    \"act@latest\",\n    \"kubent@latest\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"export GOBIN=$(git rev-parse --show-toplevel)/bin\",\n      \"export PATH=$GOBIN:$PATH\",\n      \"go install sigs.k8s.io/cloud-provider-kind@v0.2.0\"\n    ],\n    \"scripts\": {\n      \"test\": [\"echo \\\"Error: no test specified\\\" && exit 1\"]\n    }\n  }\n}"
  }
]